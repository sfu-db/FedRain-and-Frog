# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import slave_pb2 as slave__pb2


class SlaveStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Initialize = channel.unary_unary(
            "/Slave/Initialize",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )
        self.SetSecure = channel.unary_unary(
            "/Slave/SetSecure",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )
        self.UpdateDelta = channel.unary_unary(
            "/Slave/UpdateDelta",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )
        self.GetThetaX = channel.unary_unary(
            "/Slave/GetThetaX",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.ComputeEncryptedGradient = channel.unary_unary(
            "/Slave/ComputeEncryptedGradient",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.ApplyGradient = channel.unary_unary(
            "/Slave/ApplyGradient",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )
        self.SendMasterPubKey = channel.unary_unary(
            "/Slave/SendMasterPubKey",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )
        self.GetSlavePubKey = channel.unary_unary(
            "/Slave/GetSlavePubKey",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.SetOpt = channel.unary_unary(
            "/Slave/SetOpt",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )
        self.SetWeights = channel.unary_unary(
            "/Slave/SetWeights",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )
        self.GetWeights = channel.unary_unary(
            "/Slave/GetWeights",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.GetThetaXForTest = channel.unary_unary(
            "/Slave/GetThetaXForTest",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.GetThetaXForQuery = channel.unary_unary(
            "/Slave/GetThetaXForQuery",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.GetDebugState = channel.unary_unary(
            "/Slave/GetDebugState",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.StartDebug = channel.unary_unary(
            "/Slave/StartDebug",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )
        self.QGradStep1 = channel.unary_unary(
            "/Slave/QGradStep1",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.QGradStep2 = channel.unary_unary(
            "/Slave/QGradStep2",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )
        self.GetQgrad = channel.unary_unary(
            "/Slave/GetQgrad",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.HvpStep1 = channel.unary_unary(
            "/Slave/HvpStep1",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.HvpStep2 = channel.unary_unary(
            "/Slave/HvpStep2",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.HvpStep3 = channel.unary_unary(
            "/Slave/HvpStep3",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.CGInit = channel.unary_unary(
            "/Slave/CGInit",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )
        self.CGGetR2 = channel.unary_unary(
            "/Slave/CGGetR2",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.CGpHvp = channel.unary_unary(
            "/Slave/CGpHvp",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.UpdateZandR = channel.unary_unary(
            "/Slave/UpdateZandR",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )
        self.UpdateP = channel.unary_unary(
            "/Slave/UpdateP",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )
        self.CGGetRNorm = channel.unary_unary(
            "/Slave/CGGetRNorm",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.Influence = channel.unary_unary(
            "/Slave/Influence",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Data.FromString,
        )
        self.EndDebug = channel.unary_unary(
            "/Slave/EndDebug",
            request_serializer=slave__pb2.Data.SerializeToString,
            response_deserializer=slave__pb2.Empty.FromString,
        )


class SlaveServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Initialize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetSecure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateDelta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetThetaX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ComputeEncryptedGradient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ApplyGradient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendMasterPubKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetSlavePubKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetOpt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetWeights(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetWeights(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetThetaXForTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetThetaXForQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetDebugState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StartDebug(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QGradStep1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QGradStep2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetQgrad(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def HvpStep1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def HvpStep2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def HvpStep3(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CGInit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CGGetR2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CGpHvp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateZandR(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CGGetRNorm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Influence(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EndDebug(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_SlaveServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Initialize": grpc.unary_unary_rpc_method_handler(
            servicer.Initialize,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
        "SetSecure": grpc.unary_unary_rpc_method_handler(
            servicer.SetSecure,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
        "UpdateDelta": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateDelta,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
        "GetThetaX": grpc.unary_unary_rpc_method_handler(
            servicer.GetThetaX,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "ComputeEncryptedGradient": grpc.unary_unary_rpc_method_handler(
            servicer.ComputeEncryptedGradient,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "ApplyGradient": grpc.unary_unary_rpc_method_handler(
            servicer.ApplyGradient,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
        "SendMasterPubKey": grpc.unary_unary_rpc_method_handler(
            servicer.SendMasterPubKey,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
        "GetSlavePubKey": grpc.unary_unary_rpc_method_handler(
            servicer.GetSlavePubKey,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "SetOpt": grpc.unary_unary_rpc_method_handler(
            servicer.SetOpt,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
        "SetWeights": grpc.unary_unary_rpc_method_handler(
            servicer.SetWeights,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
        "GetWeights": grpc.unary_unary_rpc_method_handler(
            servicer.GetWeights,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "GetThetaXForTest": grpc.unary_unary_rpc_method_handler(
            servicer.GetThetaXForTest,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "GetThetaXForQuery": grpc.unary_unary_rpc_method_handler(
            servicer.GetThetaXForQuery,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "GetDebugState": grpc.unary_unary_rpc_method_handler(
            servicer.GetDebugState,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "StartDebug": grpc.unary_unary_rpc_method_handler(
            servicer.StartDebug,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
        "QGradStep1": grpc.unary_unary_rpc_method_handler(
            servicer.QGradStep1,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "QGradStep2": grpc.unary_unary_rpc_method_handler(
            servicer.QGradStep2,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
        "GetQgrad": grpc.unary_unary_rpc_method_handler(
            servicer.GetQgrad,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "HvpStep1": grpc.unary_unary_rpc_method_handler(
            servicer.HvpStep1,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "HvpStep2": grpc.unary_unary_rpc_method_handler(
            servicer.HvpStep2,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "HvpStep3": grpc.unary_unary_rpc_method_handler(
            servicer.HvpStep3,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "CGInit": grpc.unary_unary_rpc_method_handler(
            servicer.CGInit,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
        "CGGetR2": grpc.unary_unary_rpc_method_handler(
            servicer.CGGetR2,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "CGpHvp": grpc.unary_unary_rpc_method_handler(
            servicer.CGpHvp,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "UpdateZandR": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateZandR,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
        "UpdateP": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateP,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
        "CGGetRNorm": grpc.unary_unary_rpc_method_handler(
            servicer.CGGetRNorm,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "Influence": grpc.unary_unary_rpc_method_handler(
            servicer.Influence,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Data.SerializeToString,
        ),
        "EndDebug": grpc.unary_unary_rpc_method_handler(
            servicer.EndDebug,
            request_deserializer=slave__pb2.Data.FromString,
            response_serializer=slave__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("Slave", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Slave(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Initialize(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/Initialize",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetSecure(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/SetSecure",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateDelta(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/UpdateDelta",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetThetaX(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/GetThetaX",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ComputeEncryptedGradient(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/ComputeEncryptedGradient",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ApplyGradient(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/ApplyGradient",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SendMasterPubKey(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/SendMasterPubKey",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetSlavePubKey(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/GetSlavePubKey",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetOpt(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/SetOpt",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetWeights(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/SetWeights",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetWeights(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/GetWeights",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetThetaXForTest(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/GetThetaXForTest",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetThetaXForQuery(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/GetThetaXForQuery",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetDebugState(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/GetDebugState",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def StartDebug(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/StartDebug",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QGradStep1(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/QGradStep1",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QGradStep2(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/QGradStep2",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetQgrad(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/GetQgrad",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def HvpStep1(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/HvpStep1",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def HvpStep2(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/HvpStep2",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def HvpStep3(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/HvpStep3",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CGInit(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/CGInit",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CGGetR2(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/CGGetR2",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CGpHvp(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/CGpHvp",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateZandR(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/UpdateZandR",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateP(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/UpdateP",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CGGetRNorm(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/CGGetRNorm",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Influence(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/Influence",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Data.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def EndDebug(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Slave/EndDebug",
            slave__pb2.Data.SerializeToString,
            slave__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

